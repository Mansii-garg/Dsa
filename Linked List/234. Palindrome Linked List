Given the head of a singly linked list, return true if it is a palindrome.

Example 1:

Input: head = [1,2,2,1]
Output: true

Example 2:

Input: head = [1,2]
Output: false

Code:
    int length(ListNode* head){
        int l = 0;
        ListNode* temp = head;
        
        while(temp != NULL){
            temp = temp->next;
            l++;
        }
        
        return l;
    }
    
    ListNode* middle(ListNode* head){
        ListNode* slow = head;
        ListNode* fast = head->next;
        
        while(fast != NULL && fast->next != NULL){
            slow = slow->next;
            fast = (fast->next)->next;
        }
        
        slow = slow->next;
        return slow;
    }
    
    ListNode* reverse(ListNode* head){
        if(head == NULL || head->next == NULL){
            return head;
        }
        
        ListNode* prev = NULL;
        ListNode* curr = head;
        ListNode* nxt = head->next;
        
        while(curr != NULL){
            curr->next = prev; 
            prev = curr;
            curr = nxt;
            if(nxt != NULL)
                nxt = nxt->next;
        }
        
        return prev;
    }
    
    bool isPalindrome(ListNode* head) {
        
        if(head == NULL || head->next == NULL){
            return true;
        }
        
        ListNode* mid = middle(head);
        ListNode* head1 = head;
        ListNode* head2 = reverse(mid);
        ListNode* head3 = head2;
        
        while(head2 != NULL){
            if(head1->val != head2->val)
                return false;
            head1 = head1->next;
            head2 = head2->next;
        }
        
        reverse(head3);
        return true;
        
        /* Using stack
        stack<int> s;
        ListNode* temp = head;
    
        while(temp != NULL){
            s.push(temp->val);
            temp = temp->next;
        }
        
        temp = head;
        while(temp != NULL){
            int i = s.top();
            s.pop();
            if(i != temp->val)
                return false;
            temp = temp->next;
        }
        
        return true;
        */
}

reverse-> tc = O(N)
          sc = O(1)
stack-> tc = O(N)
        sc = O(N)

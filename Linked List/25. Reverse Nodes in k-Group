Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

Example 1:

Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]

Example 2:

Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]

Code:
ListNode* reverseKGroup(ListNode* head, int k) {
        if(head == NULL || head->next == NULL || k==1) return head;
        
        ListNode* dummy = new ListNode(0);
        dummy->next = head;
        
        ListNode* prev = dummy;
        ListNode* temp = head;
        int length = 0;
        
        while(temp){
            length++;
            temp = temp->next;
        }
        
        ListNode* curr;
        ListNode* _next;
        
        while(length >= k){
            curr = prev->next;
            _next = curr->next;
            for(int i=1; i<k; i++){
                curr->next = _next->next;
                _next->next = prev->next;
                prev->next = _next;
                _next = curr->next;
            }
            prev = curr;
            length -= k;
        }
        
        return dummy->next;
    }
    
    tc = O(N)
    sc = O(1)

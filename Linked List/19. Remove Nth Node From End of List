Given the head of a linked list, remove the nth node from the end of the list and return its head.

Example 1:

Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

Example 2:

Input: head = [1], n = 1
Output: []

Example 3:

Input: head = [1,2], n = 1
Output: [1]

Follow up: Could you do this in one pass?

Code: 1. with two pass by calculating length
class Solution {
public:
    int length(ListNode* head){
        int l = 0;
        ListNode* temp = head;
        
        while(temp != NULL){
            l++;
            temp = temp->next;
        }
        
        return l;
    }
    
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        if(head == NULL){
            return head;
        }
        
        int l = length(head);
        //int passes = l-n+1;
        ListNode* temp = head;
        ListNode* prev = NULL;
        
        for(int i=1; i<l-n+1; i++){
            prev = temp;
            temp = temp->next;
        }
        
        if(temp == head){
            head = temp->next;
        }
        
        if(prev)
            prev->next = temp->next;
        delete temp;
        
        return head;
    }
};
tc = O(2N)
sc = O(1)

2. with one pass, using two pointer slow nd fast
ListNode* removeNthFromEnd(ListNode* head, int n) {
        if(head == NULL){
            return head;
        }
        
        ListNode* slow = head;
        ListNode* fast = head;
        
        while(n--){
            fast = fast->next;
        }
        
        if(fast == NULL){
            head = slow->next;
            return head;
        }
        
        while(fast->next != NULL){
            slow = slow->next;
            fast = fast->next;
        }
        
        ListNode* temp = slow->next;
        slow->next = temp->next;
        delete temp;
        
        return head;
        
tc = O(N)
sc = O(1)

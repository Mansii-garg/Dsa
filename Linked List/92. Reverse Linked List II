Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.

Example 1:

Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]

Example 2:

Input: head = [5], left = 1, right = 1
Output: [5]

Code:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        if(head == NULL || head->next == NULL){
            return head;
        }
        
        ListNode* dummy = new ListNode(-1);
        dummy->next = head;
        
        ListNode* previt = NULL;
        ListNode* currit = dummy;
        
        for(int i=0; i<left; i++){
            previt = currit;
            currit = currit->next;
        }

        ListNode* prevR = previt;
        ListNode* currR = currit;
        
        for(int i=left; i<=right; i++){
            ListNode* nxt = currR->next;
            currR->next = prevR;
            prevR = currR;
            currR = nxt;
        }
        
        previt->next = prevR;
        currit->next = currR;
        
        return dummy->next;
    }
    
    tc = O(N)
    sc = O(1)

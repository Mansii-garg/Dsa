You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example 1:

Input: l1 = [7,2,4,3], l2 = [5,6,4]
Output: [7,8,0,7]

Example 2:

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [8,0,7]

Example 3:

Input: l1 = [0], l2 = [0]
Output: [0]

Code:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        stack<int> s1;
        stack<int> s2;
        
        while(l1 != NULL){
            s1.push(l1->val);
            l1 = l1->next;
        }
        
        while(l2 != NULL){
            s2.push(l2->val);
            l2 = l2->next;
        }
        
        int carry = 0;
        ListNode* temp = NULL;
        
        while(!s1.empty() || !s2.empty() || carry){
            
            int a = 0;
            int b = 0;
            if(!s1.empty()){
                a = s1.top();
                s1.pop();
            }
            
            if(!s2.empty()){
                b = s2.top();
                s2.pop();
            }
            
            int sum = a+b+carry;
            carry = sum/10;
            
            ListNode* n = new ListNode(sum%10);
            
            n->next = temp;
            temp = n;
        }
        
        return temp;
    }
    
    tc = O(N)
    sc = O(N)

You are given the head of a singly linked-list. The list can be represented as:

L0 → L1 → … → Ln - 1 → Ln
Reorder the list to be on the following form:

L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …
You may not modify the values in the list's nodes. Only nodes themselves may be changed.

Example 1:

Input: head = [1,2,3,4]
Output: [1,4,2,3]

Example 2:

Input: head = [1,2,3,4,5]
Output: [1,5,2,4,3]

##Code: 
class Solution {
public:
    ListNode* middle(ListNode* head){
        ListNode* slow = head;
        ListNode* fast = head->next;
        
        while(fast != NULL && fast->next != NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        
        return slow;
    }
    
    ListNode* reverse(ListNode* head){
        ListNode* prev = NULL;
        ListNode* curr = head;
        
        while(curr != NULL){
            ListNode* nxt = curr->next;
            curr->next = prev;
            prev = curr;
            curr = nxt;
        }
        
        return prev;
    }
    
    void reorderList(ListNode* head) {
        if(head == NULL || head->next == NULL){
            return;
        }
        
        ListNode* middleN = middle(head);
        
        ListNode* head2 = reverse(middleN->next);
        
        middleN->next = NULL;
        
        ListNode* head1 = head;
        
        while(head1 != NULL){
            ListNode* next1;
            ListNode* next2;
            if(head1)
                next1 = head1->next;
            if(head2)
                next2 = head2->next;
            if(head1){
                head1->next = head2;
                head1 = next1;
            }
            if(head2){
                head2->next = head1;
                head2 = next2;
            }
        }
        
    }
};

tc = O(N)
sc O(1)

Given the head of a linked list, return the list after sorting it in ascending order.

Example 1:

Input: head = [4,2,1,3]
Output: [1,2,3,4]

Example 2:

Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]

Example 3:

Input: head = []
Output: []

Code:
ListNode* middleN(ListNode* head){
        if(head == NULL || head->next == NULL){
            return head;
        }
        
        ListNode* slow = head;
        ListNode* fast = head->next;
        
        while(fast != NULL && fast->next != NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        
        return slow;
    }
    
    ListNode* merge(ListNode* list1, ListNode* list2){
        if(list1 == NULL) return list2;
        if(list2 == NULL) return list1;
        
        ListNode* head = NULL;
        ListNode* tail = NULL;
        ListNode* h1 = list1;
        ListNode* h2 = list2;
        
        while(h1 != NULL && h2 != NULL){
            if(h1->val <= h2->val){
                if(head == NULL)
                    head = h1;
                if(tail != NULL)
                    tail->next = h1;
                tail = h1;
                h1 = h1->next;
            }
            else{
                if(head == NULL)
                    head = h2;
                if(tail != NULL)
                    tail->next = h2;
                tail = h2;
                h2 = h2->next;
            }
        }
        
        if(h1 == NULL) tail->next = h2;
        if(h2 == NULL) tail->next = h1;
        
        return head;
    }
    
    ListNode* sortList(ListNode* head) {
        if(head == NULL || head->next == NULL){
            return head;
        }
        
        ListNode* middle = middleN(head);
        ListNode* head1 = middle->next;
        middle->next = NULL;
        
        head = sortList(head);
        head1 = sortList(head1);
        
        return merge(head, head1);
    }
    
    tc = O(NlogN)
    sc = O(1)
